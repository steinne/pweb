#!/usr/bin/perl
## Simple and light webserver to quickly host statis and CGIs
## no module dependencies.  Has basic auth, and a filetail feature.  
## designed for remote admin features.  Addtional admin features will be 
## added.
## run as deamon by using 
## nohup scriptname > /dev/null 2>&1 &
## this will be fixed going forward.  
require 5.8.0;    # needs perl > 5.8.0

package pweb;    # keep namespace separate from CGI scripts
use strict;
our $version = "0.5.2";

################# Configuration section #######################
# All filenames below have to be absolute (except $icondir).
# A value of "" means that there is a reasonable default, which may
# depend on the installation directory.
# ----------------- Basic configuration -----------------------
# The server root directory is the place where requests for
# http://this_host/ will look:
# if you create a html directory at the same level as pweb, it will be your default.
# if you don't,a html directory  in the directory where you run pweb will be created. 
# if not the directory where you run pweb will be the  default.  dangerous.....
# Default: $server_root/html 
our $server_root = "";
## default is 10000
our $port = "";

# Config files are better kept in a separate directory, to avoid issues.  You can place mime type file here
## as well as a password file for the basic auth.  If you want to add additional modules, create a subdirectory in the
## config directory called modules.   These will then be included in the ENV path for the server and perl cgis.
## if one isn't defined, it will be created at the default location.
# Default: $server_root/config
our $config_dir = "";

# List of mime types (absolute pathname).  You may use apaches
# mime.types, or /etc/mime.types on unix machines. Default:
# $config_dir/mime.types, or else a minimal builtin list.
our $mime_types = "";

# Handlers associate a specal cgi script in cgi-bin directory with
# specific mime-types
our %handlers ; # = ("text/xml" => "xml.cgi");

# Which filenames to treat as index files
# Default: none
our @index_filenames = qw(rw index.htm index.html);

# ------------------ Forking and executing ------------------------
# Forking policy. $never_fork and $fork_always do just what they say,;
# $fork_after_first_invocation will cause the server to fork akways *except*
# the first time a particular cgi script is run. This will ensure that
# all needed modules are already loaded whenever the script is run
# again, just as with mod_perl.
my ( $never_fork, $fork_after_first_invocation, $fork_always ) = ( 1, 2, 3 );
our $when_to_fork = $fork_always;

# if a relative path matches this regexp (case-insensitively), it is
# treated as a cgi script, and we'll try to eval or execute it.
# Default: "\.cgi$" (matching any file with extension .cgi)
# other possibilities: "\.pl$" or "\.(cgi|pl)$" or "\/cgi-bin\/"  "\/rw|(\.(cgi|pl)\$)"
our $cgi_scriptname_regexp = "(\.(cgi|pl)\$)";

# Whether to run cgi scripts by evaling or executing. $cgis_are_evaled
# and $cgis_are_executed do just what they say, $only_perl_is_evaled
# will run perl scripts by evaling and any other programs by executing
# them.  This is a tad expensive, as all cgi's have to
# be sniffed and tasted before they are run.

my ( $cgis_are_evaled, $only_perl_is_evaled, $cgis_are_executed ) = ( 1, 2, 3 );
our $eval_or_execute = $cgis_are_executed;

# -------------------- Icons -------------------------------------
# Whether to show icons in a directory listing
our $show_icons = 1;

# icon directory, relative to $server_root. Default: "icons"
our $icondir = "";    # relative name here!

# -------------------- Authentication ---------------------------
# Whether to use basic authentication as per HTTP/1.0
# Only enable this when really needed, as it makes all requests slower
our $use_authentication = 0;

# Default: $config_dir/htpasswd
## must be defined if using authenitcation.
our $password_file = "";

# For every request, pweb will climb up the directory tree until it
# finds either an explicitely public or a private directory. This will
# determine whether a password is required. Default: Everything is private,
# i.e. @public_directories = (), @private_directories = qw(/).
# Directories are specified relative to server root, but you still
# have to use leading and trailing slashes here:

our @public_directories  = qw();
#our @private_directories = qw(/);
our @private_directories = qw(/cgi-bin/);

############## End of configuration section ########################
############## nothing to configure below   ########################

use Socket;
use English;
use Cwd qw(cwd abs_path);
use autouse 'IPC::Open2' => qw( open2 );
;    # only import when needed, as EPOC (and maybe Windows?) doesn't have it.

our (
  $localname,  $OSNAME,   $HOSTNAME,            $I_am_child,
  %mime_types, %cgi_urls, %encrypted_passwords, %private,
  %public,     $invocation
);

initialise();
main_loop();
exit;

################################## Subroutines ###################

sub logerr($$);
sub logmsg($);
sub log_and_die($);
sub cat($$;$);    # forward declarations

sub initialise {
  $HOSTNAME = $ENV{HOSTNAME} || "localhost";
  $I_am_child = 0; # Will be 1 in child after a fork(). Children will just exit after finishing work. 
  $PROGRAM_NAME =~ s#\\#/#g;
  my ($pweb_homedir) = ( $PROGRAM_NAME =~ m#^(.*)/# );
  $pweb_homedir ||= cwd;    # last resort
  $pweb_homedir = abs_path($pweb_homedir);
  $pweb_homedir =~ s#/$##;
  $pweb_homedir =~ s/\/bin//;

if (not $config_dir){
  mkdir "$pweb_homedir/config" unless(-d "$pweb_homedir/config");
  $config_dir = "$pweb_homedir/config";
}
  logmsg "Setting config directory to $config_dir.....";
  push @INC, "$config_dir/modules";    # extra modules may be put here, and
  $ENV{PERL5LIB} = ( $ENV{PERL5LIB}? "$ENV{PERL5LIB}:$config_dir/modules" : "$config_dir/modules"); # ... let children know about this
  
  if ( not $server_root ) {
	mkdir "$pweb_homedir/html" unless(-d "$pweb_homedir/html");
	unless(-f "$pweb_homedir/html/index.html"){
	  open(my $ifh, "> $pweb_homedir/html/index.html") or die "Could not open file '$pweb_homedir/html/index.html'";
          print $ifh "<html><title>pweb</title><body><br><br><center>This is a default page for pweb<br>Builtin utilities available<br><a href=/filetail>filetail</a><br>Add aditional code to the html directory</center></body></html>\n";
          close $ifh;
	}
    $server_root = (
      -d "$pweb_homedir/html" ? "$pweb_homedir/html" : $pweb_homedir );
    logmsg "Setting server root to $server_root.....";
  }
  $server_root =~ s#/$##;              # remove final slash from $basdir

  $pweb::server_root =
    $server_root;    # make this variable visible for CGI scripts

  $port ||= 10000 unless $port;
  $password_file ||= "$config_dir/htpasswd";      # absolute path
  $mime_types    ||= "$config_dir/mime.types";    # absolute path
  $icondir       ||= 'icons';                     # relative to $server_root
  $cgi_scriptname_regexp ||= '\.cgi$|\.pl$';

  if ( $mime_types and open MIME, $mime_types ) {
    while (<MIME>) {                              # read list of mime types
      chomp;
      s/#.*//;                                    # ignore comments
      my ( $type, @suffixes ) = split;
      next unless @suffixes;
      foreach my $suffix (@suffixes) {
        $mime_types{".$suffix"} = $type; # e.g " $mime_types{.png} = "image/png"
      }
    }
    close MIME;
    logmsg "Using mime file $mime_types.....";
  }
  else {
    logmsg(
      (
        $mime_types
        ? "Couldn't read MIME types file $mime_types."
        : "No MIME types configured"
      )
      . " Using a minimal set instead"
    );
    %mime_types = (
      ".zip"  => "application/x-compressed",
      ".tar"  => "application/x-tar",
      ".gz"  => "application/x-gzip",
      ".gzip"  => "application/x-gzip",
      ".py"  => "text/x-script.phyton",
      ".pl"  => "text/x-script.perl",
      ".txt"  => "text/plain",
      ".png"  => "image/png",
      ".gif"  => "image/gif",
      ".jpg"  => "image/jpeg",
      ".htm"  => "text/html",
      ".html" => "text/html",
      ".css" => "text/css",
      ".js" => "application/javascript"
    );
  }

  if ($use_authentication) {    # read passwords
    open PASS, $password_file
      or log_and_die "Couldn't read password file $password_file: $!\n";
    while (<PASS>) {
      s/\s//g;
      next if /^#/;             # comments in a passwd file? Hmmm...
      my ( $name, $encrypted_password ) = split /:/;
      $encrypted_passwords{$name} = $encrypted_password
        if $encrypted_password;
    }
    close PASS;

    # initialise directory hashes
    foreach my $dir (@public_directories)  { $public{$dir}  = 1; }
    foreach my $dir (@private_directories) { $private{$dir} = 1; }
  }

  unless ( $when_to_fork == $never_fork ) {
    logmsg "Setting SIG{CHLD} to 'IGNORE'";
    $SIG{CHLD} = 'IGNORE'
      ; # We don't care about children's exit status, we just don't want zombies
  }
  
}

sub main_loop {

  # Standard Perl incantation for creating a server socket:
  my $tcp = getprotobyname('tcp');
  socket( Server, PF_INET, SOCK_STREAM, $tcp ) or log_and_die "socket: $!";
  setsockopt( Server, SOL_SOCKET, SO_REUSEADDR,
    pack( "l", 1 ) )    # to prevent "address in use" errors
    or $OSNAME =~ /EPOC/i or logmsg " Warning: setsockopt: $!";
  if ( not bind( Server, sockaddr_in( $port, INADDR_ANY ) ) ) {
    log_and_die(
      $port < 1024
      ? " bind: $! (ports below 1024 require root privs on unix-like systems)\n"
      : "bind: $!\n"
    );
  }
  listen( Server, SOMAXCONN ) or log_and_die " listen: $!";
  logmsg
    "Server started on port $port.\nPoint your browser at http://$HOSTNAME"
    . ( $port == 80 ? "" : ":$port" );

CONNECT:
  for ( ; accept( Client, Server ) ; close Client ) {

    my $remote_sockaddr = getpeername(Client);
    my ( undef, $iaddr ) = sockaddr_in($remote_sockaddr);
    my $peername = gethostbyaddr( $iaddr, AF_INET ) || "localhost";
    my $peeraddr = inet_ntoa($iaddr) || "127.0.0.1";

    my $local_sockaddr = getsockname(Client);
    my ( undef, $iaddr_local ) = sockaddr_in($local_sockaddr);
    $localname = gethostbyaddr( $iaddr_local, AF_INET ) || "localhost";
    my $localaddr = inet_ntoa($iaddr_local) || "127.0.0.1";

    $INPUT_RECORD_SEPARATOR =
      "\n";    # input record separator should be \n here (the default)
    $OUTPUT_AUTOFLUSH = 1;

    chomp( $_ = <Client> );    # get Request-Line
    my ( $method, $url, $proto, undef ) =
      split;                   # parse it

    if ( not $proto ) {        
      print Client
"<html><head></head><body> <h1>oops, don't understand your request.</h1> </body></html>";
      next CONNECT;
    }
    $url =~ s#\\#/#g;          # rewrite slashes  \ as / 
    logmsg "<- $peername: $_";
    my ( $abs_path, undef, $arglist ) =
      ( $url =~ /([^?]*)(\?(.*))?/ );    # split at ?


    if ( $abs_path !~ m#^/# ) {
      logmsg "correcting absolute path to begin with a  slash /";
      $abs_path = "/$abs_path";
    }

    my $path_info;
    if ( not $arglist and $abs_path =~ m#(.*?\.cgi)/(.+)#i ) {
      redirect("$1?$2");
      next CONNECT;
    }
    my $abs_path_escaped = $abs_path;    # keep a copy of filename with escapes
    $abs_path =~ s/%([\dA-Fa-f]{2})/chr(hex($1))/eg;    # %20 -> space

    fork_if_necessary($abs_path)
      and next CONNECT
      ; # if we have indeed forked, the child will handle the request and we can move on...

    if ( $method !~ /^(GET|POST|HEAD|PUT|DELETE)$/ ) {
      logerr 501, "I don't understand method $method";
      exit if $I_am_child;
      next CONNECT;
    }

    my ( $user, $passphrase );
    $ENV{USER_AGENT} = $ENV{CONTENT_LENGTH} = $ENV{CONTENT_TYPE} = undef;
    while (<Client>)
    {    # gobble up all remaining headers and notice the relevant ones:
      s/[\r\l\n\s]+$//;
      /^User-Agent: (.+)/i              and $ENV{USER_AGENT}     = $1;
      /^Content-length: (\d+)/i         and $ENV{CONTENT_LENGTH} = $1;
      /^Content-type: (.+)/i            and $ENV{CONTENT_TYPE}   = $1;
      /^Authorization:\s+Basic\s+(.+)/i and $passphrase          = $1;
      /^Cookie: (.+)/i                  and $ENV{HTTP_COOKIE}     = $1;

      if (/^HTTP-(.+?): (.+)/i)
      {    # any header like HTTP-Blah-Gurgle is put in BLAH_GURGLE
        my $environment_variable = uc($1);
        $environment_variable =~ s/-/_/g;
        $ENV{$environment_variable} = $2;
      }
      # We don't honour If-Modified-Since
      last if (/^$/);
    }

    if ($use_authentication) {
      $user = authorized( $abs_path, $passphrase );
      if ( not defined $user )
      {    # $abs_path is private, and authentication failed
        challenge( "pweb", $abs_path );
        exit if $I_am_child;
        next CONNECT;
      }
    }
      if ($url =~ "^/filetail"){
           $ENV{QUERY_STRING}   = $arglist;
	   local *STDIN = *Client;
           local *STDOUT = *Client;
	   my ($buffer, @pairs, $pair, $name, $value,%FORM);
           if ($method eq "POST"){
           read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
           @pairs = split(/&/, $buffer);
           foreach $pair (@pairs) {
               ($name, $value) = split(/=/, $pair);
               $value =~ tr/+/ /;
               $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
               $FORM{$name} = $value;
           }
         }
        $ENV{SERVER_SOFTWARE}   = "pweb/$version";
        logmsg "running $url";
        &filetail($url,$method,%FORM);
        next CONNECT;
     }

    if ( -d "$server_root$abs_path" ) {
      unless ( $abs_path =~ m#/$# ) {    # does $abs_path end with a slash ?
        redirect("$abs_path/");          # no? redirect to $abs_path/
        exit if $I_am_child;
        next CONNECT;
      }

      # we can from now on assume that $abs_path ends with a slash

      my $do_listing = 1;
      foreach my $index (@index_filenames)
      {                                  # check for existence of an index page
        if ( -f "$server_root$abs_path$index" ) {
          $abs_path .= $index;
          $do_listing = 0;
          last;
        }
      }
      if ($do_listing) {                 # no index found, do directory listing
        directory_listing($abs_path);
        exit if $I_am_child;
        next CONNECT;
      }
    }    # if (-d "$server_root$abs_path"

    if ( not -r "$server_root$abs_path" ) {    # check for existence of abs_path
      logerr 404, "$abs_path: $!";
      exit if $I_am_child;
      next CONNECT;
    }

    print Client "HTTP/1.1 200 OK\n";          # probably OK by now

    my $mime_type = filetype($abs_path);

    my $handler = $handlers{$mime_type};
    
    if ($handler) { # call handler
      $arglist = "file=$abs_path";
      $abs_path = "/cgi-bin/$handler";
      $mime_type = "application/cgi";
      $url = "$abs_path?$arglist";
      $method = "GET";
    }
    
    if ( $mime_type eq "application/cgi" )
    {     
      $ENV{SERVER_SOFTWARE}   = "pweb/$version";
      $ENV{SERVER_NAME}       = $localname;
      $ENV{GATEWAY_INTERFACE} = "CGI/1.1";
      $ENV{SERVER_PROTOCOL}   = $proto;
      $ENV{SERVER_PORT}       = $port;
      $ENV{REQUEST_METHOD}    = $method;
      $ENV{PATH_INFO}         = $path_info;

      $ENV{SCRIPT_NAME}     = $abs_path;
      $ENV{QUERY_STRING}    = $arglist;
      $ENV{REMOTE_HOST}     = $peername;
      $ENV{REMOTE_ADDR}     = $peeraddr;
      $ENV{AUTH_TYPE}       = ( $use_authentication ? "Basic" : "" );
      $ENV{REMOTE_USER}     = ( $use_authentication ? $user : "" );
      $ENV{SERVER_URL}      = "http://$localname:$port/";
      $ENV{SCRIPT_FILENAME} = "$server_root$abs_path";
      $ENV{REQUEST_URI}     = $url;
      $ENV{SERVER_ROOT} = $server_root;    # non-standard?

      if ( $method =~ /POST/ ) {
        logmsg
          "<- Content-length: $ENV{CONTENT_LENGTH}, type: $ENV{CONTENT_TYPE}";
      }
      cgi_run( $abs_path, $arglist, $method );
      exit if $I_am_child;
      next CONNECT;
    }

   
    cat $abs_path, $mime_type, $method || logerr 500, "$abs_path: $!";
    exit if $I_am_child;
    next CONNECT;
  }
  log_and_die "$$ Fatal error: accept failed: $!\n";  # This should never happen
}

######################################
# fork_if_necessary() inspects  $when_to_fork and forks when it thinks it should.
# This may involve keeping track of cgi script invocations when
# $when_to_fork == $fork_after_first_invocation
# Return value: 0 in child, when forking is not necessary, or after failure;
# child pid in parent
sub fork_if_necessary {
  my ($file) = @_;
  my $pid = 0;
  if (    # always fork, or second or later invocation of .cgi script?
    $when_to_fork == $fork_always
    or ( $when_to_fork != $never_fork
      and ( filetype($file) ne "application/cgi" or $cgi_urls{$file}++ ) )
    )
  {
    eval {$pid = fork()};
    if ( $@ or  $pid < 0 ) {
      warn
        "Couldn't fork now and won't try again (can your OS ever do it?): $@";
      $when_to_fork = $never_fork;
      return 0;
    }
    $I_am_child = 1 unless $pid;
  }
  return $pid;
}

# logmsg logs a time-stamped message,
# followed by newline, to STDERR. No return value.
sub logmsg ($) {
  my ($text) = (@_);
  my $fulltime = localtime();
  my $PID = sprintf "%5d", $$;
  my ($hms) = ( $fulltime =~ /(\d\d:\d\d:\d\d)/ );
  my @text = split /\n/, $text;
  foreach my $line (@text) {
    print STDERR "$PID $hms $line\n";
  }
}

sub log_and_die ($) {
  my ($text) = (@_);
  logmsg "FATAL: $text";
  die "\n";
}

##################################################################
# logerr 404, "No gnargles here, sorry!"; signals error to browser,
# logging it to STDERR as well.  No return value.
sub logerr ($$) {
  my ( $code, $detail ) = @_;
  my %codes = (
    200 => 'OK',
    400 => 'Bad Request',
    403 => 'Access Denied',
    404 => 'Not Found',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
  );
  my $msg = "$code " . $codes{$code};
  logmsg "-> $msg $detail";
  print Client <<EOF;
    HTTP/1.1 $msg
    Content-type: text/html
    <html><body>
    <h1>$msg</h1>
    <p>$detail</p>
    <hr>
    <p><I>pweb/$version server at $localname port $port</I></p>
    </body></html>
EOF
}

# cat "relative/path", "text/html", $method; writes the appropriate
# response headers to STDOUT. If $method == GET (which is the default)
# then the file is dumped on STDOUT as well.

sub cat($$;$) {
  my ( $file, $mimetype, $method ) = @_;
  $method = "GET" unless $method;
  my $fullpath = "$server_root$file";

  my ( undef, undef, undef, undef, undef, undef, undef, $length, undef, $mtime )
    = stat($fullpath);
  $mtime = gmtime $mtime;
  my ( $day, $mon, $dm, $tm, $yr ) =
    ( $mtime =~ m/(...) (...) (..) (..:..:..) (....)/ );

  print Client "Content-length: $length\n";
  print Client "Last-Modified: $day, $dm $mon $yr $tm GMT\n";
  print Client "Content-type: $mimetype\n\n";
  my $sent = 0;
  if ( $method eq "GET" ) {
    local $INPUT_RECORD_SEPARATOR = undef;   # gobble whole files, but only here
    open IN, "<$fullpath" || return 0;
    my $content = <IN>;
    close IN;
    $sent = length($content);
    print Client $content;
  }
  logmsg "-> 200 OK $file: $sent bytes sent as $mimetype";
  return 1;
}

# cgi_run("relative/path.cgi", "encoded%20arglist", $method) changes to directory
# where script lives, and then either evals or executes it.
sub cgi_run {
  my ( $script, $arglist, $method ) = @_;
  my ($dir) = ( $script =~ /^(.*\/)/ );
  my $script_path = "$server_root$script";
  my $script_text;
  chdir "$server_root$dir"
    or return logerr 500, "Cannot chdir to $server_root$dir: $!";
  $script_path =~ s/[A-Z]://;

# command line decoding, cf description at http://hoohoo.ncsa.uiuc.edu/cgi/cl.html:
  local @ARGV;
  unless ( $arglist =~ /=/ ) {
    $arglist =~
      s/%([\dA-Fa-f]{2})/chr(hex($1))/eg;    # decode arglist, e.g. %20 -> space
    @ARGV = split /\s+/, $arglist;
  }
  my $file_tastes_like_perl = 1;
  if ( $eval_or_execute != $cgis_are_executed ) {

    open CGI, $script_path or return logerr 500, "Cannot read $script_path: $!";
    my ( $script_text, $nread );
    if ( $eval_or_execute == $only_perl_is_evaled ) {
      logmsg "sniffing and tasting $script...";
      $nread = read CGI, $script_text, 100, 0;    # taste first 100 bytes
      defined $nread
        or return logerr 500, "Read error reading $script_path: $!";
      if ( $script_text !~ /#!.*perl/i )
      {    # No #!/.../perl? Then it's not a perl script.
        logmsg "yeachh! $script doesn't taste like perl!";
        close CGI;
        $file_tastes_like_perl = 0;
      }
    }
    if ($file_tastes_like_perl) {
      {
        local $INPUT_RECORD_SEPARATOR = undef;    # gobble rest of $script
        $script_text .= <CGI>;
      }
      close CGI;
      logmsg "-> eval'ing $script_path";
      my $package_name = $script;  # most CGI's dont bother to set package name.
      $package_name =~    # mangle filename into package name in order to
        s/\W/_/g;         # avoid variable name clashes when in non-forking mode
      eval <<EOF;
        local *STDIN = *Client;
        local *STDOUT = *Client;
        package $package_name;
        no strict;
        $script_text
EOF
      $@ and logerr 500, "in $script:<br>  <pre>$@</pre>";
    }
  }
  if ( $eval_or_execute == $cgis_are_executed or not $file_tastes_like_perl ) {
    -x $script_path or logerr 500, "Cannot execute $script_path: $!";
    local $ENV{CHLD} = 'DEFAULT';

    logmsg "-> exec'ing $script_path";
    my ( $pid, $cgi_out, $cgi_in, $output, $errors );
    my $parent_pid = $PID;
    eval { $pid = open2( $cgi_out, $cgi_in, $script_path, "" ) }; # the extra "" avoids the shell
    if ($@) {    # we may be kid here from open2's fork(). Weird...
      logmsg "(NB: note my PID!) When trying to execute $script:";
      chomp($@);
      logmsg $@;
      exit 0 unless $PID == $parent_pid;
    }
    else {
      if ( $method =~ /POST/i ) {
        read( Client, $_, $ENV{CONTENT_LENGTH} );
        local $SIG{PIPE} = 'IGNORE';    # avoid choking on broken pipe
        print $cgi_in $_;               # .. when tring to talk to a dead kid.
      }
      close $cgi_in;
      {
        local $INPUT_RECORD_SEPARATOR = undef;    # slurp!
        $output = <$cgi_out>;
      }
      close $cgi_out;
      waitpid( $pid, 0 );
      if ( $output =~ m#^\r?Content-Type:.*?\r?\n\r?\n#mi or  $output =~/^\r?Status:\s+302/ ) {
        print Client $output;
      }
      else {    # Capturing scripts stderr with open3 would be just too painful
                # (deadlock problems) so we're almost as unhelpful as apache!
	print STDERR $output;
        logerr 500,
          "Premature end of script headers."
          . ( $? ? "<br> Status: $?" : "" )
          . "<br>Have a look at server log for stderr output of $script";
      }
    }
  }
  chdir $server_root;
}

sub directory_listing {
  my ($dir) = @_;
  $dir =~ s#//#/#g;
  chdir "$server_root$dir"
    or return logerr 500, "Cannot chdir to $server_root$dir: $!";
  my @files = glob("*");
  @files = sort @files;
  $dir eq "/" or @files = ( "..", @files );
  print Client <<EOF;
HTTP/1.1 200 OK
Content-type: text/html\n\n
   <html>
   <head><title>$dir</title></head>
   <body>
   <h1>$dir</h1>
   <pre>
EOF
  foreach my $file (@files) {
    print_direntry($file);
  }
  print Client <<EOF;
    </pre>
    <hr>
    <p><I>pweb/$version server at $localname port $port</I>
    </body>
    </html>
EOF
  logmsg "-> 200 OK listing $dir";
}

sub filetype {
  my ($relpath) = @_;
  $relpath eq '..' and return "folder/parent";
  -d $relpath and return "folder/normal";
  ( cwd . "/$relpath" ) =~ /$cgi_scriptname_regexp/i
    and return "application/cgi";
  my ($suffix) = ( $relpath =~ /(\.\w+)$/ );
  my $type = $mime_types{ lc($suffix) };
  $type ||= "text/plain";
  return $type;
}

sub print_direntry {
  my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
  my ($file) = @_;
  my ( undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime ) =
    stat $file;
  my ( $icon, $type );
  if ($show_icons) {
    $type = filetype($file);
    $type =~ s/\//_/g;
    -r "$server_root/$icondir/$type.gif" or $type = "unknown";
    $icon = "$icondir/$type.gif";
    $icon = ( -r "$server_root/$icon" ? "<img src=\"/$icon\">" : "" );
  }
  my $filename = ( $file eq ".." ? "Parent directory" : $file );
  $filename = (
    length($filename) > 18
    ? sprintf( "%18.18s", $filename ) . ".."
    : $filename
  );
  $filename .= "/" if $type eq "folder_normal";
  my ( $x, $min, $hour, $mday, $mon, $year ) = localtime $mtime;
  $year += 1900;
  $min  = sprintf "%2.2d", $min;
  $hour = sprintf "%2.2d", $hour;
  my $date = "$mday-$months[$mon]-$year $hour:$min";
  my $spacing = " " x ( 25 - length($filename) );
  printf Client "%s <a href=\"%s\">%s</a>%s  %20.20s   %8.8s\n", $icon, $file,
    $filename, $spacing, $date, $size;
}

sub redirect {
  my ($redir) = @_;
  print Client "HTTP/1.1 301 Moved Permanently\nLocation: $redir\n\n";
  logmsg "-> 301 Moved Permanently to $redir";
}

sub challenge {
  my ( $realm, $file ) = @_;
  print Client
"HTTP/1.1 401 Access Denied\nContent-type: text/html\nWWW-Authenticate: Basic realm=\"$realm\"\n\n";
  logmsg "-> Authentication requested for $file";
}



sub authorized {
  my ( $file, $passphrase ) = @_;
  my $parent = $file;
  do {    # check whether $file is public or private
          # by stripping away final path components until
    return ""
      if $public{
      "$parent/"};    # either a public or a private directory is reached
    goto PROTECTED
      if $private{"$parent/"};    # "last" would test the wile clause once more
  } while ( $parent =~ s#/[^/]*$## );
PROTECTED:
  logmsg "checking password";
  $passphrase =~ tr#A-Za-z0-9+/##cd;     # remove non-base64 chars
  $passphrase =~ tr#A-Za-z0-9+/# -_#;    # convert to uuencoded format
  my $len = pack( "c", 32 + 0.75 * length($passphrase) );  # compute length byte
  my $decoded = unpack( "u", $len . $passphrase );         # uudecode and print
  my ( $name, $password ) = split /:/, $decoded;

  if ( my $encrypted_password = $encrypted_passwords{$name} ) {
    return $name
      if crypt( $password, $encrypted_password ) eq
      $encrypted_password;                                 # check password
  }
  return undef;                                            # failed
}

### built in utils
sub filetail() {
   my ($buffer, @pairs, $pair, $name, $value);
   my ($url,$method,%FORM) = @_;
   my %log_files; 
   if (-d $config_dir){
   unless(-f "$config_dir/filetail.conf"){
          open(my $ifh, "> $config_dir/filetail.conf") or die "Could not open file '$config_dir/filetail.conf'";
          print $ifh "## enter list of files to be allowed to be searched\n##format is simple_name:/full/path/to/file\n##example is my_access_log:/usr/logs/access_log";
          close $ifh;
        }
   }
   if ( open (DROP, "$config_dir/filetail.conf")){
    $log_files{"filetail_conf"} = "$config_dir/filetail.conf";
    while (<DROP>) {
      s/\s//g;
      next if /^#/;             # comments ...
      my ( $dname, $dvalue ) = split /:/;
      $log_files{$dname} = $dvalue;
    }
    close(DROP);
    }else {
    logmsg "Unable to open $config_dir/filetail.conf";
        %log_files = ( "nothing configured check permissions" => "nothing");      
    }
   my $file_drop_down;
     foreach my $key (keys %log_files) {
       $file_drop_down .="<option value='" . $key . "'>" . $key . "</option><br>\n";
     }
     print Client "HTTP/1.1 200 OK\n";
     print Client "Content-type: text/html\n\n";
     print Client "<html><title>$ENV{SERVER_SOFTWARE}</title><body>";
     #foreach my  $key (sort keys(%ENV)) {
     #  print Client  "$key = $ENV{$key}<br>";
     #}
     print Client " <h3>Please complete the following statement and press View File</h3><form method='POST' action=filetail>
  Search the last <select name='pre_tail' >
  <option value='100'>100</option>
  <option selected='selected' value='500'>500</option>
  <option value='1000'>1000</option>
  <option value='1500'>1500</option>
  <option value='5000'>5000</option>
  </select> lines, of the <select name='log'>
  $file_drop_down
  </select> for this <b>regex(5)</b>pattern <input type='text' name='regex' value='.*' size='20' /> and display the last <select name='post_tail' >
  <option value='10'>10</option>
  <option selected='selected' value='100'>100</option>
  <option value='500'>500</option>
  <option value='2000'>2000</option>
  <option value='5000'>5000</option>
  </select> lines that match. &nbsp;&nbsp; <input type='submit' name='submit' value='View File' /></form>";
     if ($method eq "POST"){
       while( my( $Hkey, $Hvalue ) = each %FORM ){
           #print Client  "$Hkey: $Hvalue <br>\n";  
       }
     }
	my $yes_results=0;
        my $filename = $log_files{$FORM{'log'}};
        my $pre_tail = $FORM{'pre_tail'}; #  'pre_tail';
        my $regex =  $FORM{'regex'};; # 'regex';
        my $post_tail = $FORM{'post_tail'}; #  'post_tail';
     if ($method eq "POST"){
	if(my $pid = open(KID, "-|")) { 
		print Client "<h2>Results for file \" $FORM{'log'} \" searched with regex \"  $FORM{'regex'} \"</h2>";
		while(<KID>){
			 print "<br> $_ \n";	
			 $yes_results=1;
		}
		print Client "No results found for search criteria......." if (! $yes_results);
		close(KID);
	} else {
		die "Fork failed: $!\n" unless defined $pid;    
		## send STDERR to STDOUT so the web page gives error
		open(STDERR, ">&=STDOUT") or die "Cant re-direct STDERR: $!\n"; 
		exec("tail -$pre_tail $filename | egrep -i -e '$regex' | tail -$post_tail");
	}
        close(KID);
     }
     print Client "</body><html>";
     exit 0;
}

###########

__END__


